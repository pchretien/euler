#Answer: 76576500

'''
@author: Philippe Chretien

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

Used the following ressources to solve the problem:
http://www.manhattangmat.com/forums/is-there-a-formula-to-calculate-the-number-of-factors-t2500.html
http://www.wikihow.com/Factor-a-Number
'''

import math
import time

primes = [2, 3]

def testPrime(candidate):
	i = 0
	while primes[i]*primes[i] <= candidate:
		if candidate%primes[i] == 0:
			return False
		i = i + 1
	
	return True

def checkForRoots(candidate):
	roots = 1
	remains = candidate
	for i in range(0,len(primes)):
		exp = 0	
		
		while remains % primes[i] == 0:
			exp += 1
			remains = remains / primes[i]
			
			if remains == 1:
				return roots*(exp+1)
				
		roots *= (exp+1)
		
	return roots

def buildPrimesVector(limit):	
	global primes
	
	print "Building vector of primes"
	
	count = 2
	prime = 5
	
	while True:
		if testPrime(prime) == True:
			primes.append(prime)
			count = count + 1

		if count == limit:
			break

		prime = prime + 2
	print "Done"


def main():
	startTime = time.time()
	
	candidate = 0
	increment = 1
	
	buildPrimesVector(25)
	
	while True:
		candidate += increment
		increment += 1
		
		if candidate%2 > 0:
			continue

		# Test candidate
		roots = checkForRoots(candidate)

		# Debug
		#if roots > 100:
		#	print str(candidate) + " -> " + str(roots)

		if roots > 500:
			break

	print "Answer: " + str(candidate)
	print time.time() - startTime

if __name__ == "__main__":
	main()
	